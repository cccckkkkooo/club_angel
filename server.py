from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import hashlib
from datetime import datetime

app = Flask(__name__)
CORS(app)

DB_NAME = "club_angel.db"


# ====== –•–≠–õ–ü–ï–†–´ ======
def get_db_connection():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    return conn


def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()


# ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ ======
def init_db():
    conn = get_db_connection()
    cur = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        playtime INTEGER DEFAULT 0
    )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å–æ–ª–µ–π
    cur.execute("""
    CREATE TABLE IF NOT EXISTS consoles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL
    )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    cur.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        console_id INTEGER NOT NULL,
        start_time TEXT NOT NULL,
        end_time TEXT NOT NULL,
        FOREIGN KEY (user_id) REFERENCES users(id),
        FOREIGN KEY (console_id) REFERENCES consoles(id)
    )
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for c in ["PS 1", "PS 2", "PS 3", "PS 4", "PS 5"]:
        cur.execute("INSERT OR IGNORE INTO consoles (name) VALUES (?)", (c,))

    conn.commit()
    conn.close()


# ====== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ======
@app.route("/register", methods=["POST"])
def register():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return jsonify({"error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"}), 400

    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)",
                    (username, hash_password(password)))
        conn.commit()
    except sqlite3.IntegrityError:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}), 400
    finally:
        conn.close()

    return jsonify({"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"}), 201


# ====== –õ–û–ì–ò–ù ======
@app.route("/login", methods=["POST"])
def login():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = cur.fetchone()
    conn.close()

    if user and user["password_hash"] == hash_password(password):
        return jsonify({"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", "user_id": user["id"]})
    else:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}), 401


# ====== –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ======
@app.route("/booking", methods=["POST"])
def booking():
    try:
        data = request.json
        username = data.get("username")
        console_id = data.get("console_id")
        start_time = data.get("start_time")
        end_time = data.get("end_time")

        if not all([username, console_id, start_time, end_time]):
            return jsonify({"error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"}), 400

        conn = get_db_connection()
        cur = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT id FROM users WHERE username = ?", (username,))
        user = cur.fetchone()
        if not user:
            conn.close()
            return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        user_id = user["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å
        cur.execute("SELECT id FROM consoles WHERE id = ?", (console_id,))
        console = cur.fetchone()
        if not console:
            conn.close()
            return jsonify({"error": "–ö–æ–Ω—Å–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        cur.execute("""
            SELECT * FROM bookings
            WHERE console_id = ?
              AND start_time < ?
              AND end_time > ?
        """, (console_id, end_time, start_time))
        conflict = cur.fetchone()
        if conflict:
            conn.close()
            return jsonify({"error": "–ö–æ–Ω—Å–æ–ª—å —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ –≤—Ä–µ–º—è!"}), 400

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
        cur.execute("""
            INSERT INTO bookings (user_id, console_id, start_time, end_time)
            VALUES (?, ?, ?, ?)
        """, (user_id, console_id, start_time, end_time))
        conn.commit()
        conn.close()

        return jsonify({"message": "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"})

    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≤ booking:", e)
        return jsonify({"error": str(e)}), 500


# ====== –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô ======
@app.route("/bookings", methods=["GET"])
def get_bookings():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT b.id, u.username, b.console_id, b.start_time, b.end_time
        FROM bookings b
        JOIN users u ON b.user_id = u.id
    """)
    rows = cur.fetchall()
    conn.close()

    bookings = [dict(row) for row in rows]
    return jsonify(bookings)


# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (playtime) ======
@app.route("/add_playtime", methods=["POST"])
def add_playtime():
    data = request.json
    username = data.get("username")
    hours = data.get("hours", 1)

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("UPDATE users SET playtime = playtime + ? WHERE username=?", (hours, username))
    conn.commit()
    conn.close()

    return jsonify({"message": f"{hours} —á. –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}"})


# ====== –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê ======
if __name__ == "__main__":
    init_db()
    app.run(host="0.0.0.0", port=5000, debug=True)
